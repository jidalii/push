const {
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const { expect } = require("chai");
const { ethers } = require("hardhat");
const snarkjs = require("snarkjs");

// console.log("ethers:", ethers);

describe("RunVerifier", function () {
  it("Should accept the Groth zk-proof of running HealthKit data", async function () {
    const { runVerifier, owner, signer1 } = await loadFixture(
      deployRunningVerifier
    );

    const proof = {
      A: [
        "19215016485524802889392450852901181922616756355230455711119671892659201615404",
        "2397831286968909163774921482880873305106171487972404295778781287357251562894",
        "1",
      ],
      B: [
        "16656497114404352362293987632410125744677876378695119491055662433130374601198",
        "8387777326204557785721671979490063105847828601784417326545351986760171536748",
        "1",
      ],
      C: [
        "948821787028159999362939472845454244433308954286605816770293813753068063900",
        "13365050591813443871254951676659254465942492996614670529208314720460852804698",
        "1",
      ],
      Z: [
        "14455244957212402798336879673847343920145594675784658663296510286614121120448",
        "14813847549809079944883361281118959234470416892446361303538933930719846326026",
        "1",
      ],
      T1: [
        "10900998643025798291965949935591016622946733289469206464956833966731482119954",
        "7508836321784564258647470276767360400008048345436465217875581086375249027481",
        "1",
      ],
      T2: [
        "20990085373806441794974189885249507860724002723801249752459639816014956193258",
        "15483437860950065375538528755682123478263119960226943231425920633075108790503",
        "1",
      ],
      T3: [
        "1580788287852900938886678205423501110191825486228267396793950176766286586670",
        "10876973589167901150471676191873219068134146043228704105512133643763293754037",
        "1",
      ],
      Wxi: [
        "9426376509343500951625465282869668808815020073941168620477979668987640899590",
        "8724586094717755925513889211849323667718830451181647271148704652937301305180",
        "1",
      ],
      Wxiw: [
        "1660625657328017390278920120480895348805247285274538193719578366994900630072",
        "9201954664864929656497665323309318004937464650111840024543252883834548414197",
        "1",
      ],
      eval_a:
        "10258142054769008451217319125458041350789141454206801202382061538672628251755",
      eval_b:
        "3345613058256782694038568755349467159096194123189201518530410335368983204997",
      eval_c:
        "17620453905394335753473323999618646925096038854128445514502262535496731251711",
      eval_s1:
        "19497872829948715925123358971649645973393433335961377036137403746290704021472",
      eval_s2:
        "17884125040465025691094132166551401460501016606897484430205420127158248254650",
      eval_zw:
        "5842914255659933182402553867824012643641111330856311529348106011137386327604",
      protocol: "plonk",
      curve: "bn128",
    };

    const pubSignals = ["1606812600", "1606825200", "6", "10"];

    const calldataBlob = await snarkjs.plonk.exportSolidityCallData(
      proof,
      pubSignals
    );

    const calldata = calldataBlob.split("][");

    let proofHex = JSON.parse(calldata[0] + "]");
    let signalsHex = JSON.parse("[" + calldata[1]);

    // Call the verifyProof function
    const result = await runVerifier.verifyProof(proofHex, signalsHex);
    console.log("Verification result:", result);
    expect(result).to.be.true;
  });

  it("Should reject the Groth zk-proof of running HealthKit data", async function () {
    const { runVerifier, owner, signer1 } = await loadFixture(
      deployRunningVerifier
    );

    const proof = {
      A: [
        "20922349040915033787686440688005031694685334963811606392194956006318737404428",
        "11798373179038209391188032240468618228410614456942780451170031576704413735462",
        "1",
      ],
      B: [
        "8536269986027070848013715683044173153382585879349761639115985815457001018473",
        "4923320128052831037618108956747868942470151469491178360035075864621629022950",
        "1",
      ],
      C: [
        "13086852576406397872535745809922950362905670611526058669064900205263138752675",
        "4639461238968638666265875248988108044890146914935822644036723867636542155352",
        "1",
      ],
      Z: [
        "4926461131673010713450457094363037420571998007411911662697711086387656274327",
        "3631952910018397507037570944394879772917000133319738937900393682616008768336",
        "1",
      ],
      T1: [
        "5067237285556803383633827040760806180742123784681625135533200325293919350054",
        "15349417223526237335303704489825291213928920926559814603203502966214444906128",
        "1",
      ],
      T2: [
        "2992968484572593360042097471232254055366385933968809059943391702164137449236",
        "14408171928211027590992277669668471821650165308628730558724438396359236134011",
        "1",
      ],
      T3: [
        "5530333945724617946585972846895919390806495379767601899970344576913716443944",
        "18992953820344675759078640348063158514085029400576627776914815765181058938523",
        "1",
      ],
      Wxi: [
        "14436257697267568808685451592306452378403173911332453757446233330525088498611",
        "16976644336348554385379645055016470305099522996505859261336445449329980318874",
        "1",
      ],
      Wxiw: [
        "21278903388280582061733832194966576852770009961415795943435354392523403651063",
        "8550810137767031978669186757080027712628505045153286616136540001517478551680",
        "1",
      ],
      eval_a:
        "3267281429076269011485226554981807813032527086949336617208921919698733020927",
      eval_b:
        "9475395225750869081195322793293616409688820755869641926285866287219132289835",
      eval_c:
        "19129999142759399545254711916559669753325154506519540607501685407262583599033",
      eval_s1:
        "19825831162598896704844175256507853054526242432389820427177024072164630763177",
      eval_s2:
        "9938392479352935060831242640797888048953961915424870851568209668271060372137",
      eval_zw:
        "1228083514574460750547629328891997724632837265796341343598018782942051201443",
      protocol: "plonk",
      curve: "bn128",
    };
    const pubSignals = ["1606812600", "1606825200", "6", "10"];

    const calldataBlob = await snarkjs.plonk.exportSolidityCallData(
      proof,
      pubSignals
    );

    const calldata = calldataBlob.split("][");

    let proofHex = JSON.parse(calldata[0] + "]");
    let signalsHex = JSON.parse("[" + calldata[1]);

    // Call the verifyProof function
    const result = await runVerifier.verifyProof(proofHex, signalsHex);
    console.log("Verification result:", result);
    expect(result).to.be.false;
  });
});

describe("SleepVerifier", function () {
  it("Should accept the Groth zk-proof of sleep HealthKit data", async function () {
    const { sleepVerifier, owner, signer1 } = await loadFixture(
      deploySleepingVerifier
    );

    const proof = {
      A: [
        "20074114571318717581278318235951495489411011821986308116676531574392447601310",
        "21671066097357293144749208179663124061109798437132612745922521626636220628815",
        "1",
      ],
      B: [
        "20288714439658093212310088206981418716401207267044311405109781367269698957718",
        "4198463193472321759020836709473866626143073993641176768971452349665428910786",
        "1",
      ],
      C: [
        "18363944470702581947198641756038180666185932980831453630767469449792408728681",
        "21454590083698267022907074789997830661680711095576843415827950121443419559167",
        "1",
      ],
      Z: [
        "12034079018654988818662148709182992406007877389405788415705352538917728727286",
        "2145903820529087035710685969743019891227009942576742503987076865862171358142",
        "1",
      ],
      T1: [
        "1072469108302272994784214880437597827277959455006047106324277842815358315936",
        "21524076818959387746171762579614602804218064150750602326877874538504700195959",
        "1",
      ],
      T2: [
        "13104784236146150304079065244848018557782791118423838684752396962876806506326",
        "5581343021021548344486714605878866859669295543568407254977794519703052832102",
        "1",
      ],
      T3: [
        "11640338247318861194768097492173384491436927000403389681583396804452469416520",
        "12950409709195547096272020458247818354933712311441589242478072312160530281202",
        "1",
      ],
      Wxi: [
        "7819332947422534232939032240322371918521790453248933435739744569757677570886",
        "20120079330602195491788207793356544927860566915524900861173221817937455199181",
        "1",
      ],
      Wxiw: [
        "9857643032103710778587947883605378484305093839783709901256183598889255256621",
        "5683984894927091261967632635714952528572425673818379753126482675457274166114",
        "1",
      ],
      eval_a:
        "2124533968756755502504653145629688553493819557244359600879228434636063894595",
      eval_b:
        "12043526407726923911139254674181140567110275529492405473193868638259596249177",
      eval_c:
        "3805685412727597663800923553476854947023733222883000441047060025728617104057",
      eval_s1:
        "7824016013928034327342658177845686233922285464376266598625850159123183509517",
      eval_s2:
        "16970557263879332370217306672104969230459445067832990032366417768722887231104",
      eval_zw:
        "11205442064513481868736861000254197299883525382531599573605536420389145914198",
      protocol: "plonk",
      curve: "bn128",
    };
    const pubSignals = ["1606812600", "1606825200", "7", "8"];

    const calldataBlob = await snarkjs.plonk.exportSolidityCallData(
      proof,
      pubSignals
    );

    const calldata = calldataBlob.split("][");

    let proofHex = JSON.parse(calldata[0] + "]");
    let signalsHex = JSON.parse("[" + calldata[1]);

    // Call the verifyProof function
    const result = await sleepVerifier.verifyProof(proofHex, signalsHex);
    console.log("Verification result:", result);
    expect(result).to.be.true;
  });

  it("Should reject the Groth zk-proof of sleep HealthKit data", async function () {
    const { sleepVerifier, owner, signer1 } = await loadFixture(
      deploySleepingVerifier
    );

    const proof = {
      A: [
        "17367512862327205831157207056034360466061213282878652385443035952944745113635",
        "15391602922332794399815271705146214787096148372913078190254176250475576145937",
        "1",
      ],
      B: [
        "3652921391423956450800618064789768992043280304251422712084325857894035822886",
        "12249095325095842852987488691771863299296855247072172974350233334628301467228",
        "1",
      ],
      C: [
        "9933973313491754320332828018749684659093085559309218790550600531796607404899",
        "7717830251898138467368170274174712220060476579098567849297317587898481665964",
        "1",
      ],
      Z: [
        "13194233725399113634535488861365913956344660206270367245763339580790478834380",
        "17452917327304777100100407872263657211574360973740628619122946709924460566767",
        "1",
      ],
      T1: [
        "13221232108322996814087744912255458606667443390499591499019238029562645187275",
        "5287515464911324181350130143849305385829950996132951853941785783000080136348",
        "1",
      ],
      T2: [
        "21608358226766324417578894138722023519391773671557242103030209772513403342047",
        "7878240881236719365190434567670379931660255260719944860794877541232077881796",
        "1",
      ],
      T3: [
        "21763864359318667633132919386022518759396840679561776449249989787856564249719",
        "10200648498552731813148484467708313994572228853111329144622832925230913101664",
        "1",
      ],
      eval_a:
        "18254320816899630114274117994089095014774685780587016203298876854545483633196",
      eval_b:
        "16876083344235517887195991660947637303135667381282976745338877523403161477835",
      eval_c:
        "20917765161012328833764673240105364543654074289301204635450717221561264574285",
      eval_s1:
        "21227366120144223578632765785034957308344377250831485000079270404114882603795",
      eval_s2:
        "3626578689482442988236548443476192689567268478129878948721946437385758419804",
      eval_zw:
        "5216846482185186207916038520019291548989932729208198670492400919003741565706",
      eval_r:
        "12750467461808367277172356200448001879552501719919723200245241089667078558701",
      Wxi: [
        "20965387333278712664321701606872077751240208910079673544867907969791874246898",
        "9498540605622530779440517850255947098973804445557432370009791162504499863199",
        "1",
      ],
      Wxiw: [
        "17081454467096880489994582103480480989451609398642070091255346401827897106753",
        "3279046200363872515235385324866190818521724181482302136744301026517477972519",
        "1",
      ],
      protocol: "plonk",
      curve: "bn128",
    };
    const pubSignals = ["1606812600", "1606825200", "6", "11"];

    const calldataBlob = await snarkjs.plonk.exportSolidityCallData(
      proof,
      pubSignals
    );

    const calldata = calldataBlob.split("][");

    let proofHex = JSON.parse(calldata[0] + "]");
    let signalsHex = JSON.parse("[" + calldata[1]);

    // Call the verifyProof function
    const result = await sleepVerifier.verifyProof(proofHex, signalsHex);
    console.log("Verification result:", result);
    expect(result).to.be.false;
  });
});

async function deployRunningVerifier() {
  const [owner, signer1] = await ethers.getSigners();

  // Link the Pairing library to the RunVerifier contract
  const RunVerifier = await ethers.getContractFactory("RunPlonkVerifier", {});

  // Deploy the RunVerifier with the linked Pairing library
  const runVerifier = await RunVerifier.deploy();

  return { runVerifier, owner, signer1 };
}

async function deploySleepingVerifier() {
  const [owner, signer1] = await ethers.getSigners();

  // Link the Pairing library to the RunVerifier contract
  const SleepVerifier = await ethers.getContractFactory(
    "SleepPlonkVerifier",
    {}
  );

  // Deploy the RunVerifier with the linked Pairing library
  const sleepVerifier = await SleepVerifier.deploy();

  return { sleepVerifier, owner, signer1 };
}
