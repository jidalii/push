const {
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");
const { expect } = require("chai");
const { ethers } = require("hardhat");

// console.log("ethers:", ethers);

describe("RunVerifier", function () {
  it("Should accept the Groth zk-proof of running HealthKit data", async function () {
    const { runVerifier, owner, signer1 } = await loadFixture(
      deployRunningVerifier
    );

    const proof = {
      "A": [
       "20922349040915033787686440688005031694685334963811606392194956006318737404428",
       "11798373179038209391188032240468618228410614456942780451170031576704413735462",
       "1"
      ],
      "B": [
       "8536269986027070848013715683044173153382585879349761639115985815457001018473",
       "4923320128052831037618108956747868942470151469491178360035075864621629022950",
       "1"
      ],
      "C": [
       "13086852576406397872535745809922950362905670611526058669064900205263138752675",
       "4639461238968638666265875248988108044890146914935822644036723867636542155352",
       "1"
      ],
      "Z": [
       "4926461131673010713450457094363037420571998007411911662697711086387656274327",
       "3631952910018397507037570944394879772917000133319738937900393682616008768336",
       "1"
      ],
      "T1": [
       "5067237285556803383633827040760806180742123784681625135533200325293919350054",
       "15349417223526237335303704489825291213928920926559814603203502966214444906128",
       "1"
      ],
      "T2": [
       "2992968484572593360042097471232254055366385933968809059943391702164137449236",
       "14408171928211027590992277669668471821650165308628730558724438396359236134011",
       "1"
      ],
      "T3": [
       "5530333945724617946585972846895919390806495379767601899970344576913716443944",
       "18992953820344675759078640348063158514085029400576627776914815765181058938523",
       "1"
      ],
      "Wxi": [
       "14436257697267568808685451592306452378403173911332453757446233330525088498611",
       "16976644336348554385379645055016470305099522996505859261336445449329980318874",
       "1"
      ],
      "Wxiw": [
       "21278903388280582061733832194966576852770009961415795943435354392523403651063",
       "8550810137767031978669186757080027712628505045153286616136540001517478551680",
       "1"
      ],
      "eval_a": "3267281429076269011485226554981807813032527086949336617208921919698733020928",
      "eval_b": "9475395225750869081195322793293616409688820755869641926285866287219132289835",
      "eval_c": "19129999142759399545254711916559669753325154506519540607501685407262583599033",
      "eval_s1": "19825831162598896704844175256507853054526242432389820427177024072164630763177",
      "eval_s2": "9938392479352935060831242640797888048953961915424870851568209668271060372137",
      "eval_zw": "1228083514574460750547629328891997724632837265796341343598018782942051201443",
      "protocol": "plonk",
      "curve": "bn128"
     };
    const pubSignals = ["1606812600", "1606825200", "6", "10"];

    const formattedProof = convertObjectToHexPadded(convertProofToHex(proof));
    const formattedPubSignals = convertToHexPadded(pubSignals);

    // Call the verifyProof function
    const result = await runVerifier.verifyProof(
      formattedProof,
      formattedPubSignals
    );
    console.log("Verification result:", result);
    expect(result).to.be.true;
  });

  it("Should reject the Groth zk-proof of running HealthKit data", async function () {
    const { runVerifier, owner, signer1 } = await loadFixture(
      deployRunningVerifier
    );

    const proof = {
      "A": [
       "20922349040915033787686440688005031694685334963811606392194956006318737404428",
       "11798373179038209391188032240468618228410614456942780451170031576704413735462",
       "1"
      ],
      "B": [
       "8536269986027070848013715683044173153382585879349761639115985815457001018473",
       "4923320128052831037618108956747868942470151469491178360035075864621629022950",
       "1"
      ],
      "C": [
       "13086852576406397872535745809922950362905670611526058669064900205263138752675",
       "4639461238968638666265875248988108044890146914935822644036723867636542155352",
       "1"
      ],
      "Z": [
       "4926461131673010713450457094363037420571998007411911662697711086387656274327",
       "3631952910018397507037570944394879772917000133319738937900393682616008768336",
       "1"
      ],
      "T1": [
       "5067237285556803383633827040760806180742123784681625135533200325293919350054",
       "15349417223526237335303704489825291213928920926559814603203502966214444906128",
       "1"
      ],
      "T2": [
       "2992968484572593360042097471232254055366385933968809059943391702164137449236",
       "14408171928211027590992277669668471821650165308628730558724438396359236134011",
       "1"
      ],
      "T3": [
       "5530333945724617946585972846895919390806495379767601899970344576913716443944",
       "18992953820344675759078640348063158514085029400576627776914815765181058938523",
       "1"
      ],
      "Wxi": [
       "14436257697267568808685451592306452378403173911332453757446233330525088498611",
       "16976644336348554385379645055016470305099522996505859261336445449329980318874",
       "1"
      ],
      "Wxiw": [
       "21278903388280582061733832194966576852770009961415795943435354392523403651063",
       "8550810137767031978669186757080027712628505045153286616136540001517478551680",
       "1"
      ],
      "eval_a": "3267281429076269011485226554981807813032527086949336617208921919698733020927",
      "eval_b": "9475395225750869081195322793293616409688820755869641926285866287219132289835",
      "eval_c": "19129999142759399545254711916559669753325154506519540607501685407262583599033",
      "eval_s1": "19825831162598896704844175256507853054526242432389820427177024072164630763177",
      "eval_s2": "9938392479352935060831242640797888048953961915424870851568209668271060372137",
      "eval_zw": "1228083514574460750547629328891997724632837265796341343598018782942051201443",
      "protocol": "plonk",
      "curve": "bn128"
     };
    const pubSignals = ["1606812600", "1606825200", "6", "10"];

    const formattedProof = convertObjectToHexPadded(convertProofToHex(proof));
    const formattedPubSignals = convertToHexPadded(pubSignals);

    // Call the verifyProof function
    const result = await runVerifier.verifyProof(
      formattedProof,
      formattedPubSignals
    );
    console.log("Verification result:", result);
    expect(result).to.be.false;
  });
});

describe("SleepVerifier", function () {
  it("Should accept the Groth zk-proof of sleep HealthKit data", async function () {
    const { sleepVerifier, owner, signer1 } = await loadFixture(
      deploySleepingVerifier
    );

    const proof = {
      "A": [
       "21121934687242223741415632946639225693338456406148287310238976292630401308549",
       "10438702655863478331289091815592063675532388682087909516810583801636954658449",
       "1"
      ],
      "B": [
       "10810682110622057879282246156153694058117525126585687535768924988504966208389",
       "5656025788188424175891884382785536281717839992726952988936651845548772080358",
       "1"
      ],
      "C": [
       "207177088918229005431151341683584843489337186427967341686298395118809345966",
       "2050750237803656487761942151462594589291247902279877803563981777289169296760",
       "1"
      ],
      "Z": [
       "11137329151060028401392091716287860993170945801405359687370997993794440657234",
       "20581028026664211379254933399983599131136612777151948263273130941203857829407",
       "1"
      ],
      "T1": [
       "21879064859255579151460135910489888394297553971140296304325039961008274771858",
       "12601653914144222850535772876535843612007605375898194351741831411468596326258",
       "1"
      ],
      "T2": [
       "18125281910877523609128032333303395697247680104494471895105536719247930317016",
       "10302868865675700650218462809410474005630683303425942627503192601755342693903",
       "1"
      ],
      "T3": [
       "7441458266210911017585036528219276965961942687731069740062776399103122608042",
       "12131898609894443972216328363326225452844823061430984845087890803265906451971",
       "1"
      ],
      "Wxi": [
       "4894296838861440452383431845938660197904033437789884964537566816690511963475",
       "10098790010005680287637052771903054240347135727614333715308012516438895025715",
       "1"
      ],
      "Wxiw": [
       "3232262280060800850772634948156956021276519496258840881616625109263257427427",
       "5284160394215715876510079319734699170223153774622888667688056412835009105710",
       "1"
      ],
      "eval_a": "5286379601641460957963531869859328553381986422931697449864708838955209982625",
      "eval_b": "8963973206327641207411243267680009592045041450954702602068783654911139424224",
      "eval_c": "1214417679078815118666039732387350693945501004597004025099045661722181249340",
      "eval_s1": "18317858823047707948260188081212201600915377183668316789700185152551615861161",
      "eval_s2": "12976662649777265088784844468891935525834663703369833598678877418760946894543",
      "eval_zw": "7606062132446591636478230062131787902094526844406669826042814861033746588964",
      "protocol": "plonk",
      "curve": "bn128"
     };
    const pubSignals = ["1606812600", "1606825200", "6", "8"];

    const formattedProof = convertObjectToHexPadded(convertProofToHex(proof));
    const formattedPubSignals = convertToHexPadded(pubSignals);

    // Call the verifyProof function
    const result = await sleepVerifier.verifyProof(
      formattedProof,
      formattedPubSignals
    );
    console.log("Verification result:", result);
    expect(result).to.be.true;
  });

  it("Should reject the Groth zk-proof of sleep HealthKit data", async function () {
    const { sleepVerifier, owner, signer1 } = await loadFixture(
      deploySleepingVerifier
    );

    const proof = {
      "A": [
       "21121934687242223741415632946639225693338456406148287310238976292630401308549",
       "10438702655863478331289091815592063675532388682087909516810583801636954658449",
       "1"
      ],
      "B": [
       "10810682110622057879282246156153694058117525126585687535768924988504966208389",
       "5656025788188424175891884382785536281717839992726952988936651845548772080358",
       "1"
      ],
      "C": [
       "207177088918229005431151341683584843489337186427967341686298395118809345966",
       "2050750237803656487761942151462594589291247902279877803563981777289169296760",
       "1"
      ],
      "Z": [
       "11137329151060028401392091716287860993170945801405359687370997993794440657234",
       "20581028026664211379254933399983599131136612777151948263273130941203857829407",
       "1"
      ],
      "T1": [
       "21879064859255579151460135910489888394297553971140296304325039961008274771858",
       "12601653914144222850535772876535843612007605375898194351741831411468596326258",
       "1"
      ],
      "T2": [
       "18125281910877523609128032333303395697247680104494471895105536719247930317016",
       "10302868865675700650218462809410474005630683303425942627503192601755342693903",
       "1"
      ],
      "T3": [
       "7441458266210911017585036528219276965961942687731069740062776399103122608042",
       "12131898609894443972216328363326225452844823061430984845087890803265906451971",
       "1"
      ],
      "Wxi": [
       "4894296838861440452383431845938660197904033437789884964537566816690511963475",
       "10098790010005680287637052771903054240347135727614333715308012516438895025715",
       "1"
      ],
      "Wxiw": [
       "3232262280060800850772634948156956021276519496258840881616625109263257427427",
       "5284160394215715876510079319734699170223153774622888667688056412835009105710",
       "1"
      ],
      "eval_a": "5286379601641460957963531869859328553381986422931697449864708838955209982626",
      "eval_b": "8963973206327641207411243267680009592045041450954702602068783654911139424224",
      "eval_c": "1214417679078815118666039732387350693945501004597004025099045661722181249340",
      "eval_s1": "18317858823047707948260188081212201600915377183668316789700185152551615861161",
      "eval_s2": "12976662649777265088784844468891935525834663703369833598678877418760946894543",
      "eval_zw": "7606062132446591636478230062131787902094526844406669826042814861033746588964",
      "protocol": "plonk",
      "curve": "bn128"
     };
    const pubSignals = ["1606812600", "1606825200", "6", "8"];

    const formattedProof = convertObjectToHexPadded(convertProofToHex(proof));
    const formattedPubSignals = convertToHexPadded(pubSignals);

    // Call the verifyProof function
    const result = await sleepVerifier.verifyProof(
      formattedProof,
      formattedPubSignals
    );
    console.log("Verification result:", result);
    expect(result).to.be.false;
  });
});

function convertObjectToHexPadded(obj) {
  const hexArray = [];

  // Function to convert a single BigInt number to a padded hex string
  const toPaddedHexString = (bigInt) => {
    return "0x" + bigInt.toString(16).padStart(64, "0");
  };

  // Iterate over each key in the object
  for (const key of Object.keys(obj)) {
    const value = obj[key];

    // Check if the value is an array (handle nested arrays too)
    if (Array.isArray(value)) {
      // Handle nested arrays for points like A, B, C, etc.
      if (Array.isArray(value[0])) {
        value.forEach((innerArray) => {
          innerArray.forEach((number) => {
            hexArray.push(toPaddedHexString(BigInt(number)));
          });
        });
      } else {
        // Handle flat arrays for points like eval_a, eval_b, etc.
        value.forEach((number) => {
          hexArray.push(toPaddedHexString(BigInt(number)));
        });
      }
    } else {
      // Handle single values that are not arrays
      hexArray.push(toPaddedHexString(BigInt(value)));
    }
  }

  return hexArray;
}

function convertToHexPadded(pubSignals) {
  return pubSignals.map((signal) => {
    // Convert the decimal string to a BigInt
    const bigIntValue = BigInt(signal);

    // Convert BigInt to a hexadecimal string
    let hexValue = bigIntValue.toString(16);

    // Pad the hexadecimal string with leading zeros to ensure 64 characters
    // 64 characters correspond to 32 bytes or 256 bits, which is typical for Ethereum
    const paddedHex = "0x" + hexValue.padStart(64, "0");

    return paddedHex;
  });
}

function convertProofToHex(proof) {
  // Helper function to convert to a 0x-prefixed hexadecimal string
  const toHex = (numStr) => {
    return "0x" + BigInt(numStr).toString(16);
  };

  // Convert the proof object, excluding the "1"s and non-numeric properties
  let convertedProof = {};
  for (let [key, value] of Object.entries(proof)) {
    if (key !== "protocol" && key !== "curve") {
      if (key.startsWith("eval_")) {
        // Convert single numeric strings directly
        convertedProof[key] = toHex(value);
      } else {
        // Convert arrays, excluding the last element "1"
        convertedProof[key] = value.slice(0, -1).map(toHex);
      }
    }
  }

  return convertedProof;
}

async function deployRunningVerifier() {
  const [owner, signer1] = await ethers.getSigners();

  // Link the Pairing library to the RunVerifier contract
  const RunVerifier = await ethers.getContractFactory("RunPlonkVerifier", {});

  // Deploy the RunVerifier with the linked Pairing library
  const runVerifier = await RunVerifier.deploy();

  return { runVerifier, owner, signer1 };
}

async function deploySleepingVerifier() {
  const [owner, signer1] = await ethers.getSigners();

  // Link the Pairing library to the RunVerifier contract
  const SleepVerifier = await ethers.getContractFactory(
    "SleepPlonkVerifier",
    {}
  );

  // Deploy the RunVerifier with the linked Pairing library
  const sleepVerifier = await SleepVerifier.deploy();

  return { sleepVerifier, owner, signer1 };
}


